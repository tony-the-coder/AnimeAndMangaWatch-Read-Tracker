@page "/animes/delete"
@using Microsoft.EntityFrameworkCore
@using AnimeAndMangaDatabase.Models
@inject IDbContextFactory<AnimeAndMangaDatabase.Data.AnimeAndMangaDatabaseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Anime</h2>
    <hr />
    @if (anime is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@anime.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateLastWatched</dt>
            <dd class="col-sm-10">@anime.DateLastWatched</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ShowStillOngoing</dt>
            <dd class="col-sm-10">@anime.ShowStillOngoing</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WaitingForNewDubs</dt>
            <dd class="col-sm-10">@anime.WaitingForNewDubs</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">WaitingForNewSeason</dt>
            <dd class="col-sm-10">@anime.WaitingForNewSeason</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ReleaseDateForNextSeason</dt>
            <dd class="col-sm-10">@anime.ReleaseDateForNextSeason</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Genre</dt>
            <dd class="col-sm-10">@anime.Genre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Rating</dt>
            <dd class="col-sm-10">@anime.Rating</dd>
        </dl>
        <EditForm method="post" Model="anime" OnValidSubmit="DeleteAnime" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(anime is null)">Delete</button> |
            <a href="/animes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Anime? anime;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        anime = await context.Anime.FirstOrDefaultAsync(m => m.Id == Id);

        if (anime is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAnime()
    {
        using var context = DbFactory.CreateDbContext();
        context.Anime.Remove(anime!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/animes");
    }
}
